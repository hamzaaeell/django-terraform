name: Deploy to Staging

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/modules/**'                    # Shared modules affect all environments
      - 'terraform/environments/staging/**'       # Only staging-specific changes
      - '.github/workflows/deploy-staging.yml'    # Changes to this workflow
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.5.0

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Cache Terraform
      uses: actions/cache@v4
      with:
        path: |
          ~/.terraform.d/plugin-cache
          terraform/environments/staging/.terraform
        key: ${{ runner.os }}-terraform-${{ env.TERRAFORM_VERSION }}-${{ hashFiles('terraform/environments/staging/**/*.tf') }}
        restore-keys: |
          ${{ runner.os }}-terraform-${{ env.TERRAFORM_VERSION }}-

    - name: Terraform Init
      working-directory: terraform/environments/staging
      run: terraform init

    - name: Terraform Validate
      working-directory: terraform/environments/staging
      run: terraform validate

    - name: Create Terraform Variables File
      working-directory: terraform/environments/staging
      run: |
        cat > secrets.auto.tfvars << EOF
        database_password = "${{ secrets.STAGING_DATABASE_PASSWORD }}"
        key_pair_name = "${{ secrets.AWS_KEY_PAIR_NAME }}"
        github_repo_url = "${{ github.server_url }}/${{ github.repository }}.git"
        EOF

    - name: Terraform Plan
      working-directory: terraform/environments/staging
      run: terraform plan -out=tfplan

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-staging
        path: terraform/environments/staging/tfplan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    environment: staging
    needs: terraform-plan
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan-staging
        path: terraform/environments/staging/

    - name: Terraform Init
      working-directory: terraform/environments/staging
      run: terraform init

    - name: Terraform Apply
      working-directory: terraform/environments/staging
      run: terraform apply tfplan

    - name: Get Application URL
      working-directory: terraform/environments/staging
      run: |
        echo "APPLICATION_URL=$(terraform output -raw application_url)" >> $GITHUB_ENV

    - name: Notify Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Staging deployment ${{ job.status }}!
          Application URL: ${{ env.APPLICATION_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: terraform-apply
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get Application URL
      working-directory: terraform/environments/staging
      run: |
        terraform init
        echo "APPLICATION_URL=$(terraform output -raw application_url)" >> $GITHUB_ENV

    - name: Wait for deployment
      run: sleep 300

    - name: Run Integration Tests
      run: |
        # Test frontend
        curl -f ${{ env.APPLICATION_URL }} || exit 1
        
        # Test backend API
        curl -f ${{ env.APPLICATION_URL }}/api/ || exit 1
        
        # Test admin panel
        curl -f ${{ env.APPLICATION_URL }}/admin/ || exit 1
        
        echo "âœ… All integration tests passed!"