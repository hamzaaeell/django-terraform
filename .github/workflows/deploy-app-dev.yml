name: Deploy Application to Development

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'requirements.txt'
      - 'package.json'
      - '.github/workflows/deploy-app-dev.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'requirements.txt'
      - 'package.json'
  workflow_dispatch:  # Allow manual trigger
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'requirements.txt'
      - 'package.json'

env:
  AWS_REGION: us-east-1

jobs:
  build-and-test:
    name: Build and Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Create Simple Frontend Build
      run: |
        mkdir -p frontend/build
        cat > frontend/build/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>DevConnector</title>
            <style>
                body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                .container { max-width: 600px; margin: 0 auto; }
                h1 { color: #333; }
                .status { background: #d4edda; padding: 20px; border-radius: 5px; margin: 20px 0; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üöÄ DevConnector</h1>
                <div class="status">
                    <h2>Infrastructure Successfully Deployed!</h2>
                    <p>Your AWS infrastructure is running:</p>
                    <ul style="text-align: left;">
                        <li>‚úÖ VPC with public/private subnets</li>
                        <li>‚úÖ Application Load Balancer</li>
                        <li>‚úÖ Auto Scaling Group</li>
                        <li>‚úÖ RDS PostgreSQL Database</li>
                        <li>‚úÖ Security Groups</li>
                    </ul>
                    <p><strong>Next:</strong> Deploy your Django + React application!</p>
                </div>
            </div>
        </body>
        </html>
        EOF

    - name: Create Simple Backend
      run: |
        mkdir -p backend
        echo "print('Backend placeholder - infrastructure deployed successfully!')" > backend/app.py

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          frontend/build/
          backend/

  deploy-to-dev:
    name: Deploy to Development Environment
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    - name: Get EC2 Instance IDs
      run: |
        INSTANCE_IDS=$(aws ec2 describe-instances \
          --filters "Name=tag:Environment,Values=dev" \
                   "Name=instance-state-name,Values=running" \
          --query 'Reservations[].Instances[].InstanceId' \
          --output text)
        echo "INSTANCE_IDS=$INSTANCE_IDS" >> $GITHUB_ENV

    - name: Deploy Application
      run: |
        for instance_id in $INSTANCE_IDS; do
          echo "Deploying to instance: $instance_id"
          
          # Send simple deployment commands via SSM
          aws ssm send-command \
            --instance-ids $instance_id \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "#!/bin/bash",
              "set -e",
              "echo Starting deployment...",
              "sudo yum update -y",
              "sudo yum install -y nginx",
              "sudo mkdir -p /var/www/html",
              "echo \"<!DOCTYPE html><html><head><title>DevConnector Success</title><style>body{font-family:Arial,sans-serif;text-align:center;padding:50px;background:#f5f5f5}.container{max-width:600px;margin:0 auto;background:white;padding:40px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1)}h1{color:#28a745}.status{background:#d4edda;padding:20px;border-radius:5px;margin:20px 0;border:1px solid #c3e6cb}</style></head><body><div class=container><h1>üöÄ DevConnector</h1><div class=status><h2>‚úÖ Infrastructure Deployed!</h2><p>Your AWS infrastructure is operational!</p><ul><li>‚úÖ VPC with subnets</li><li>‚úÖ Load Balancer</li><li>‚úÖ Auto Scaling Group</li><li>‚úÖ RDS Database</li><li>‚úÖ Security Groups</li></ul></div></div></body></html>\" | sudo tee /var/www/html/index.html",
              "sudo systemctl start nginx",
              "sudo systemctl enable nginx",
              "sudo systemctl status nginx",
              "echo ‚úÖ Deployment completed successfully!"
            ]' \
            --output table
        done

    - name: Wait for Deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 180
        echo "Deployment wait completed"

    - name: Verify Deployment
      run: |
        # Get ALB DNS name
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names "dev-devconnector-alb" \
          --query 'LoadBalancers[0].DNSName' \
          --output text)
        
        echo "üîç Checking deployment status..."
        
        # Check SSM command status
        for instance_id in $INSTANCE_IDS; do
          echo "Checking instance $instance_id..."
          
          # Get recent commands for this instance
          RECENT_COMMANDS=$(aws ssm describe-instance-information \
            --filters "Key=InstanceIds,Values=$instance_id" \
            --query 'InstanceInformationList[0].PingStatus' \
            --output text 2>/dev/null || echo "Unknown")
          
          echo "Instance $instance_id ping status: $RECENT_COMMANDS"
        done
        
        # Test with retries
        echo "üåê Testing application URL: http://$ALB_DNS"
        
        for i in {1..10}; do
          echo "Attempt $i/10..."
          
          if curl -f -m 10 "http://$ALB_DNS" > /dev/null 2>&1; then
            echo "‚úÖ Application is responding!"
            curl -s "http://$ALB_DNS" | head -n 5
            echo "üöÄ Dev environment: http://$ALB_DNS"
            exit 0
          fi
          
          echo "‚è≥ Application not ready yet, waiting..."
          sleep 30
        done
        
        echo "‚ùå Application still not responding after 5 minutes"
        echo "üîç Let's check what's happening..."
        
        # Show more details about the load balancer
        aws elbv2 describe-target-health \
          --target-group-arn $(aws elbv2 describe-target-groups \
            --names "dev-frontend-tg" \
            --query 'TargetGroups[0].TargetGroupArn' \
            --output text) \
          --output table
        
        echo "Load balancer URL: http://$ALB_DNS"
        echo "Check AWS Console for more details"
        exit 1