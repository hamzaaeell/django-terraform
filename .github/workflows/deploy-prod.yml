name: Deploy to Production

on:
  release:
    types: [published]
  push:
    branches: [ main ]
    paths:
      - 'terraform/modules/**'                    # Shared modules affect all environments
      - 'terraform/environments/prod/**'          # Only prod-specific changes
      - '.github/workflows/deploy-prod.yml'       # Changes to this workflow
  workflow_dispatch:
    inputs:
      confirm_production:
        description: 'Type "DEPLOY_TO_PRODUCTION" to confirm'
        required: true
        default: ''

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.5.0

jobs:
  validate-input:
    name: Validate Production Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
    - name: Validate confirmation
      run: |
        if [ "${{ github.event.inputs.confirm_production }}" != "DEPLOY_TO_PRODUCTION" ]; then
          echo "‚ùå Production deployment not confirmed"
          exit 1
        fi
        echo "‚úÖ Production deployment confirmed"

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: production
    needs: [validate-input]
    if: always() && (needs.validate-input.result == 'success' || github.event_name == 'release')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: terraform/environments/prod
      run: terraform init

    - name: Terraform Validate
      working-directory: terraform/environments/prod
      run: terraform validate

    - name: Terraform Plan
      working-directory: terraform/environments/prod
      run: |
        terraform plan \
          -var="database_password=${{ secrets.PROD_DATABASE_PASSWORD }}" \
          -var="key_pair_name=${{ secrets.AWS_KEY_PAIR_NAME }}" \
          -var="github_repo_url=${{ github.server_url }}/${{ github.repository }}.git" \
          -out=tfplan

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-prod
        path: terraform/environments/prod/tfplan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    environment: production
    needs: terraform-plan
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan-prod
        path: terraform/environments/prod/

    - name: Terraform Init
      working-directory: terraform/environments/prod
      run: terraform init

    - name: Terraform Apply
      working-directory: terraform/environments/prod
      run: terraform apply tfplan

    - name: Get Application URL
      working-directory: terraform/environments/prod
      run: |
        echo "APPLICATION_URL=$(terraform output -raw application_url)" >> $GITHUB_ENV

    - name: Notify Teams
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          üöÄ PRODUCTION DEPLOYMENT ${{ job.status }}!
          Application URL: ${{ env.APPLICATION_URL }}
          Release: ${{ github.event.release.tag_name }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  smoke-tests:
    name: Production Smoke Tests
    runs-on: ubuntu-latest
    needs: terraform-apply
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get Application URL
      working-directory: terraform/environments/prod
      run: |
        terraform init
        echo "APPLICATION_URL=$(terraform output -raw application_url)" >> $GITHUB_ENV

    - name: Wait for deployment
      run: sleep 600

    - name: Run Smoke Tests
      run: |
        # Test application health
        for i in {1..5}; do
          if curl -f ${{ env.APPLICATION_URL }}; then
            echo "‚úÖ Frontend is healthy"
            break
          fi
          echo "‚è≥ Waiting for frontend... (attempt $i/5)"
          sleep 30
        done
        
        # Test API health
        for i in {1..5}; do
          if curl -f ${{ env.APPLICATION_URL }}/api/; then
            echo "‚úÖ Backend API is healthy"
            break
          fi
          echo "‚è≥ Waiting for backend API... (attempt $i/5)"
          sleep 30
        done
        
        echo "üéâ Production deployment successful!"

    - name: Create deployment record
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            description: 'Production deployment via GitHub Actions'
          })