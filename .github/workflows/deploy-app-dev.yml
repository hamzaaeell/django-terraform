name: Deploy Application to Development

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'requirements.txt'
      - 'package.json'
      - '.github/workflows/deploy-app-dev.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'requirements.txt'
      - 'package.json'

env:
  AWS_REGION: us-east-1

jobs:
  build-and-test:
    name: Build and Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Frontend Dependencies
      working-directory: frontend
      run: npm ci

    - name: Install Backend Dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Frontend Tests
      working-directory: frontend
      run: npm test -- --coverage --watchAll=false

    - name: Run Backend Tests
      working-directory: backend
      run: |
        python manage.py test
        coverage run --source='.' manage.py test
        coverage report

    - name: Build Frontend
      working-directory: frontend
      run: npm run build

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          frontend/build/
          backend/

  deploy-to-dev:
    name: Deploy to Development Environment
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    - name: Get EC2 Instance IDs
      run: |
        INSTANCE_IDS=$(aws ec2 describe-instances \
          --filters "Name=tag:Environment,Values=dev" \
                   "Name=instance-state-name,Values=running" \
          --query 'Reservations[].Instances[].InstanceId' \
          --output text)
        echo "INSTANCE_IDS=$INSTANCE_IDS" >> $GITHUB_ENV

    - name: Deploy Application
      run: |
        for instance_id in $INSTANCE_IDS; do
          echo "Deploying to instance: $instance_id"
          
          # Create deployment script
          cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Navigate to app directory
        cd /opt/devconnector
        
        # Pull latest code
        git pull origin develop
        
        # Update backend dependencies
        cd backend
        pip install -r requirements.txt
        python manage.py migrate
        python manage.py collectstatic --noinput
        
        # Update frontend
        cd ../frontend
        npm ci
        npm run build
        
        # Restart services
        sudo systemctl restart devconnector-backend
        sudo systemctl restart nginx
        
        echo "Deployment completed successfully!"
        EOF
          
          # Copy and execute deployment script
          aws ssm send-command \
            --instance-ids $instance_id \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["bash /tmp/deploy.sh"]' \
            --output text
        done

    - name: Wait for Deployment
      run: sleep 120

    - name: Verify Deployment
      run: |
        # Get ALB DNS name
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names "dev-devconnector-alb" \
          --query 'LoadBalancers[0].DNSName' \
          --output text)
        
        # Test frontend
        curl -f "http://$ALB_DNS" || exit 1
        
        # Test backend API
        curl -f "http://$ALB_DNS/api/" || exit 1
        
        echo "âœ… Application deployment verified!"
        echo "ðŸš€ Dev environment: http://$ALB_DNS"